# .github/workflows/release.yml
# This workflow creates a GitHub Release with native GraalVM executables for four platforms.
# It triggers automatically when a tag starting with 'v' is pushed.

name: Create Release with GraalVM Native Binaries

on:
  push:
    tags:
      - 'v*' # Trigger the workflow on pushes of tags like v0.1.0, v1.2.3-M2

jobs:
  # Job to build the native executable for Linux (x86_64)
  build-linux-amd64:
    name: Build for Linux (x86_64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          graalvm-version: 'latest'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Build native executable
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 600
          max_attempts: 3
          command: ./gradlew :map-cli:nativeCompile
      - name: Upload Linux executable
        uses: actions/upload-artifact@v4
        with:
          name: pulse-map-linux-amd64
          path: map-cli/build/native/nativeCompile/pulse-map

  # Job to build the native executable for macOS (x86_64 / Intel)
  build-macos-amd64:
    name: Build for macOS (x86_64)
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          graalvm-version: 'latest'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Build native executable
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 600
          max_attempts: 3
          command: ./gradlew :map-cli:nativeCompile
      - name: Upload macOS executable
        uses: actions/upload-artifact@v4
        with:
          name: pulse-map-macos-amd64
          path: map-cli/build/native/nativeCompile/pulse-map

  # Job to build the native executable for macOS (aarch64 / Apple Silicon)
  build-macos-arm64:
    name: Build for macOS (aarch64)
    runs-on: macos-14 # This runner provides an ARM64 environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          graalvm-version: 'latest'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Build native executable
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 600
          max_attempts: 3
          command: ./gradlew :map-cli:nativeCompile
      - name: Upload macOS ARM executable
        uses: actions/upload-artifact@v4
        with:
          name: pulse-map-macos-arm64
          path: map-cli/build/native/nativeCompile/pulse-map

  # Job to build the native executable for Windows (x86_64)
  build-windows-amd64:
    name: Build for Windows (x86_64)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          graalvm-version: 'latest'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Build native executable
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 600
          max_attempts: 3
          command: ./gradlew.bat :map-cli:nativeCompile
      - name: Upload Windows executable
        uses: actions/upload-artifact@v4
        with:
          name: pulse-map-windows-amd64.exe
          path: map-cli/build/native/nativeCompile/pulse-map.exe

  # Job to create the GitHub Release and upload all executables
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-linux-amd64, build-macos-amd64, build-macos-arm64, build-windows-amd64]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Version Consistency
        run: |
          TAG_VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          PROJECT_VERSION=$(grep 'version=' gradle.properties | cut -d'=' f2)
          if [ "$TAG_VERSION" != "$PROJECT_VERSION" ]; then
            echo "Error: Git tag ($TAG_VERSION) does not match project version in gradle.properties ($PROJECT_VERSION)."
            exit 1
          fi

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Finalize Changelog
        run: |
          # Check if there are any tags before this one.
          # If 'git describe' fails, it means this is the first tag.
          if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
            # Not the first tag, so generate changelog from the previous tag.
            echo "Generating changelog from previous tag."
            ./gradlew patchChangelog --no-daemon
          else
            # This is the first tag. Generate changelog from the very first commit.
            echo "First tag detected. Generating changelog from initial commit."
            FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
            ./gradlew patchChangelog -Pchangelog.from=$FIRST_COMMIT -Pchangelog.to=HEAD --no-daemon
          fi

      - name: Commit updated changelog
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs(changelog): update for release ${{ github.ref_name }}"
          file_pattern: CHANGELOG.md

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          draft: true
          prerelease: false

      - name: Upload Release Assets
        run: |
          gh release upload ${{ github.ref_name }} \
            dist/pulse-map-linux-amd64/pulse-map#pulse-map-linux-amd64 \
            dist/pulse-map-macos-amd64/pulse-map#pulse-map-macos-amd64 \
            dist/pulse-map-macos-arm64/pulse-map#pulse-map-macos-arm64 \
            dist/pulse-map-windows-amd64.exe/pulse-map.exe#pulse-map-windows-amd64.exe \
            --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
