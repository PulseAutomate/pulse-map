name: Release (tagged)

on:
  push:
    tags: ['v*','V*']
  workflow_dispatch: {}

permissions:
  contents: write
  attestations: write
  id-token: write

env:
  JAVA_VERSION: '21'
  NATIVE_TASK: ':map-cli:nativeCompile'
  BIN_DIR: 'map-cli/build/native/nativeCompile'
  IMAGE_NAME: 'pulse-map'

jobs:
  guard-main:
    name: Guard - main + tag sanity
    runs-on: ubuntu-latest
    outputs:
      is_prerelease: ${{ steps.vercheck.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.ref }}

      - name: Ensure tag commit is on main
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          set -euo pipefail
          COMMIT_SHA="$(git rev-parse "${GITHUB_REF}^{commit}")"
          git fetch --no-tags --depth=1 origin +refs/heads/main:refs/remotes/origin/main
          git merge-base --is-ancestor "${COMMIT_SHA}" origin/main || { echo "Tag must be on main"; exit 1; }

      - name: Require annotated tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TYPE="$(git for-each-ref --format="%(objecttype)" "refs/tags/${GITHUB_REF_NAME}")"
          [ "$TYPE" = "tag" ] || { echo "Tag must be annotated"; exit 1; }

      - name: Validate tag format
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          [[ "${GITHUB_REF_NAME}" =~ ^[vV][0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z]+[0-9]*)?$ ]] || { echo "Bad tag"; exit 1; }

      - name: Compare gradle.properties version with tag
        id: vercheck
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          PROP="$(grep '^version=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')"
          TAG="${GITHUB_REF_NAME#v}"; TAG="${TAG#V}"
          [ "$PROP" = "$TAG" ] || { echo "Version mismatch: $PROP vs $TAG"; exit 1; }
          case "$TAG" in
            *-M*|*-RC*|*-alpha*|*-beta*|*-preview*) echo "is_prerelease=true"  >> "$GITHUB_OUTPUT" ;;
            *) echo "is_prerelease=false" >> "$GITHUB_OUTPUT" ;;
          esac

  changelog:
    name: Patch CHANGELOG.md
    needs: guard-main
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.ref }}
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
      - uses: gradle/actions/setup-gradle@v3
      - name: Patch changelog
        run: ./gradlew --no-daemon patchChangelog -Pversion=${GITHUB_REF_NAME#v}
      - name: Commit & push changelog
        run: |
          if ! git diff --quiet; then
            git -c user.name="github-actions[bot]" -c user.email="41898282+github-actions[bot]@users.noreply.github.com" \
              commit -am "docs(changelog): release ${GITHUB_REF_NAME}"
            git push
          fi

  build:
    name: Native build (${{ matrix.os }} / ${{ matrix.label }})
    needs: guard-main
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-latest, label: linux-x86_64,  exe_ext: "" }
          - { os: windows-latest, label: windows-x86_64, exe_ext: ".exe" }
          - { os: macos-13, label: macos-x86_64,       exe_ext: "" }
          - { os: macos-latest, label: macos-arm64,    exe_ext: "" }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.ref }}

      - uses: graalvm/setup-graalvm@v1
        with:
          distribution: graalvm-community
          java-version: ${{ env.JAVA_VERSION }}
          components: native-image
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: gradle/actions/setup-gradle@v3

      - name: Sanity tests
        run: ./gradlew --no-daemon test

      - name: Build native image
        run: ./gradlew --no-daemon ${{ env.NATIVE_TASK }}

      - name: Package artifact (*nix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -e
          TAG="${GITHUB_REF_NAME#v}"; TAG="${TAG#V}"
          NAME="${IMAGE_NAME}"; LABEL="${{ matrix.label }}"
          BIN="${BIN_DIR}/${NAME}${{ matrix.exe_ext }}"
          [ -f "$BIN" ] || { echo "Binary not found at $BIN"; ls -R map-cli/build || true; exit 1; }
          chmod +x "$BIN"
          mkdir -p "dist/${NAME}-${TAG}-${LABEL}"
          cp "$BIN" "dist/${NAME}-${TAG}-${LABEL}/${NAME}${{ matrix.exe_ext }}"
          (cd dist && tar -czf "${NAME}-${TAG}-${LABEL}.tar.gz" "${NAME}-${TAG}-${LABEL}")
          ls -l dist

      - name: Package artifact (Windows)
        if: runner.os == 'Windows'
        env:
          LABEL: ${{ matrix.label }}
        run: |
          $ErrorActionPreference = "Stop"
          $Tag  = "${env:GITHUB_REF_NAME}".TrimStart('v','V')
          $Name = "${env:IMAGE_NAME}"
          $Bin  = "map-cli/build/native/nativeCompile/$Name.exe"
          if (-not (Test-Path $Bin)) { Get-ChildItem -Recurse map-cli/build; throw "Binary not found at $Bin" }
          $Base = "$Name-$Tag-$env:LABEL"
          New-Item -ItemType Directory -Force -Path "dist/$Base" | Out-Null
          Copy-Item $Bin "dist/$Base/$Name.exe"
          Compress-Archive -Path "dist/$Base/*" -DestinationPath "dist/$Base.zip" -Force
          Get-ChildItem dist

      - name: Create SBOM (CycloneDX)
        run: ./gradlew --no-daemon cyclonedxBomAll || true

      - name: Upload build artifacts (per-OS)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-${{ github.ref_name }}-${{ matrix.label }}
          path: |
            dist/*.zip
            dist/*.tar.gz
            **/build/reports/bom*.json
            **/build/reports/bom*.xml
          if-no-files-found: error

  draft-release:
    name: Draft release + checksums + provenance
    needs: [guard-main, changelog, build]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      # Checkout FIRST so it can't wipe dist later
      - name: Checkout (for CHANGELOG)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.ref }}
          clean: false  # keep any downloaded files

      # Pull all matrix artifacts straight into ./dist
      - name: Download build archives to dist/
        uses: actions/download-artifact@v4
        with:
          pattern: "${{ env.IMAGE_NAME }}-${{ github.ref_name }}-*"
          merge-multiple: true
          path: dist

      - name: List archives
        run: |
          echo "Tree under dist/:"
          find dist -type f -printf '%p\n' || true
          echo "Found archives:"
          find dist -type f \( -name '*.zip' -o -name '*.tar.gz' \) -printf '%p\n' || true

      - name: Ensure we have archives
        run: |
          shopt -s nullglob
          mapfile -t files < <(find dist -type f \( -name '*.zip' -o -name '*.tar.gz' \))
          echo "Matched: ${#files[@]} files"
          ((${#files[@]} > 0)) || { echo "No release archives under dist/"; exit 1; }

      # Create release checksums + the attestation subjects list
      - name: Generate checksums (release assets + subjects file)
        shell: bash
        run: |
          set -euo pipefail
          # create checksum files alongside each archive
          while IFS= read -r -d '' f; do
            sha256sum "$f" > "$f.sha256"
          done < <(find dist -type f \( -name '*.zip' -o -name '*.tar.gz' \) -print0)
          # subjects file for attest-build-provenance: "<sha256>  <filename>" (shasum format)
          find dist -type f \( -name '*.zip' -o -name '*.tar.gz' \) -print0 \
            | xargs -0 sha256sum > subject.checksums.txt
          [ -s subject.checksums.txt ] || { echo "No subjects to attest"; exit 1; }
          nl -ba subject.checksums.txt

      # Attest by checksums (robust across paths)
      - name: Attest build provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-checksums: subject.checksums.txt

      - name: Extract notes for this tag from CHANGELOG.md
        id: notes
        run: |
          TAG="${GITHUB_REF_NAME#v}"; TAG="${TAG#V}"
          awk -v tag="${TAG}" '
            $0 ~ "^## \\["tag"\\]" {p=1; next}
            p && $0 ~ "^## \\[" {p=0}
            p {print}
          ' CHANGELOG.md > notes.md || true
          [ -s notes.md ] || echo "No specific section found; using empty body."

      - name: Create/Update draft GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: ${{ needs.guard-main.outputs.is_prerelease }}
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body_path: notes.md
          files: |
            dist/**/*.zip
            dist/**/*.tar.gz
            dist/**/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}