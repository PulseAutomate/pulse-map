name: Release (tagged)

on:
  push:
    tags: ['v*', 'V*']   # allow lowercase/uppercase
  workflow_dispatch: {}  # manual run for testing

permissions:
  contents: write
  attestations: write
  id-token: write

env:
  JAVA_VERSION: '21'
  NATIVE_TASK: ':map-cli:nativeCompile'
  BIN_DIR: 'map-cli/build/native/nativeCompile'  # graalvm buildtools default output
  IMAGE_NAME: 'pulse-map'                        # matches graal imageName

jobs:
  guard-main:
    name: Guard - main + tag sanity
    runs-on: ubuntu-latest
    outputs:
      is_prerelease: ${{ steps.vercheck.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Ensure tag commit is on main (tag runs only)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          git branch --contains "$GITHUB_SHA" --format="%(refname)" | grep -q "refs/heads/main" || \
          (echo "Tag must point to a commit on main"; exit 1)

      - name: Require annotated tag (tag runs only)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          t=$(git cat-file -t "$GITHUB_REF")
          [ "$t" = "tag" ] || { echo "Tag must be annotated"; exit 1; }

      - name: Validate tag format (SemVer + optional pre-release) (tag runs only)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG="${GITHUB_REF_NAME}"
          [[ "$TAG" =~ ^[vV][0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z]+[0-9]*)?$ ]] || {
            echo "Bad tag format: $TAG"; exit 1; }

      - name: Compare gradle.properties version with tag (tag runs only)
        id: vercheck
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          PROP=$(grep '^version=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          TAG="${GITHUB_REF_NAME#v}"
          TAG="${TAG#V}"
          [ "$PROP" = "$TAG" ] || { echo "Version mismatch: gradle.properties=$PROP, tag=$TAG"; exit 1; }
          case "$TAG" in
            *-M*|*-RC*|*-alpha*|*-beta*|*-preview*)
              echo "is_prerelease=true"  >> $GITHUB_OUTPUT ;;
            *)
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
              [[ "$PROP" == *-SNAPSHOT ]] && { echo "Release version must not end with -SNAPSHOT"; exit 1; } ;;
          esac

  changelog:
    name: Patch CHANGELOG.md
    runs-on: ubuntu-latest
    needs: guard-main
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: ${{ env.JAVA_VERSION }} }
      - uses: gradle/gradle-build-action@v3
      - name: Patch changelog
        run: ./gradlew --no-daemon patchChangelog -Pversion=${GITHUB_REF_NAME#v}
      - name: Commit & push changelog
        run: |
          if ! git diff --quiet; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add CHANGELOG.md
            git commit -m "docs(changelog): release ${GITHUB_REF_NAME}"
            git push
          fi

  build:
    name: Native build (${{ matrix.os }} / ${{ matrix.label }})
    needs: guard-main
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            label: linux-x86_64
            archive: tar.gz
            exe_ext: ""
          - os: windows-latest
            label: windows-x86_64
            archive: zip
            exe_ext: ".exe"
          - os: macos-13
            label: macos-x86_64
            archive: tar.gz
            exe_ext: ""
          - os: macos-latest
            label: macos-arm64
            archive: tar.gz
            exe_ext: ""
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: graalvm/setup-graalvm@v1
        with:
          distribution: graalvm-community
          java-version: ${{ env.JAVA_VERSION }}
          components: native-image
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: gradle/gradle-build-action@v3

      - name: Sanity tests
        run: ./gradlew --no-daemon test

      - name: Build native image
        run: ./gradlew --no-daemon ${{ env.NATIVE_TASK }}

      - name: Locate binary & package
        id: pkg
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME#v}"; TAG="${TAG#V}"
          NAME="${{ env.IMAGE_NAME }}"
          BIN="${{ env.BIN_DIR }}/${NAME}${{ matrix.exe_ext }}"
          [ -f "$BIN" ] || { echo "Binary not found at $BIN"; ls -R map-cli/build || true; exit 1; }
          if [[ "$RUNNER_OS" != "Windows" ]]; then chmod +x "$BIN"; fi

          mkdir -p dist/"${NAME}-${TAG}-${{ matrix.label }}"
          cp "$BIN" dist/"${NAME}-${TAG}-${{ matrix.label }}"/"${NAME}${{ matrix.exe_ext }}"
          # Optionally include LICENSE/README:
          # cp LICENSE README.md dist/"${NAME}-${TAG}-${{ matrix.label }}"/

          if [[ "${{ matrix.archive }}" == "zip" ]]; then
            (cd dist && zip -r "${NAME}-${TAG}-${{ matrix.label }}.zip" "${NAME}-${TAG}-${{ matrix.label }}")
          else
            (cd dist && tar -czf "${NAME}-${TAG}-${{ matrix.label }}.tar.gz" "${NAME}-${TAG}-${{ matrix.label }}")
          fi

      - name: Smoke test binary (--version)
        shell: bash
        run: |
          BIN="dist/${{ env.IMAGE_NAME }}-${GITHUB_REF_NAME#v}-${{ matrix.label }}/${{ env.IMAGE_NAME }}${{ matrix.exe_ext }}"
          BIN="${BIN/V/}" # support uppercase V
          "$BIN" --version || { echo "Smoke test failed"; exit 1; }

      - name: Create SBOM (CycloneDX)
        run: ./gradlew --no-daemon cyclonedxBomAll || true

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-${{ github.ref_name }}-${{ matrix.label }}
          path: |
            dist/*.zip
            dist/*.tar.gz
            **/build/reports/bom*.json
            **/build/reports/bom*.xml
          if-no-files-found: warn

  draft-release:
    name: Draft release + checksums + provenance
    needs: [guard-main, changelog, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Generate SHA-256 checksums
        run: |
          cd dist
          find . -type f \( -name '*.zip' -o -name '*.tar.gz' \) -print0 | \
            xargs -0 -I {} sh -c 'sha256sum "{}" > "{}.sha256"'

      - uses: actions/checkout@v4

      - name: Extract notes for this tag from CHANGELOG.md
        id: notes
        run: |
          TAG="${GITHUB_REF_NAME#v}"; TAG="${TAG#V}"
          awk -v tag="$TAG" '
            $0 ~ "^## \\["tag"\\]" {p=1; next}
            p && $0 ~ "^## \\[" {p=0}
            p {print}
          ' CHANGELOG.md > notes.md || true
          [ -s notes.md ] || echo "No specific section found; using empty body."

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            dist/**/*.zip
            dist/**/*.tar.gz

      - name: Create/Update draft GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: ${{ needs.guard-main.outputs.is_prerelease }}
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body_path: notes.md
          files: |
            dist/**/*.zip
            dist/**/*.tar.gz
            dist/**/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  next-dev:
    name: Bump to next -SNAPSHOT via PR
    needs: draft-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Compute and bump version
        id: bump
        run: |
          CUR=$(grep '^version=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')
          IFS='.-' read MA MI PA REST <<<"$CUR"
          NEXT="$MA.$MI.$((PA+1))-SNAPSHOT"
          sed -i -E "s/^version=.*/version=$NEXT/" gradle.properties
          git switch -c chore/bump-next-snapshot || git checkout -b chore/bump-next-snapshot
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -am "chore(version): bump to $NEXT"
          git push -u origin chore/bump-next-snapshot
          echo "next=$NEXT" >> $GITHUB_OUTPUT

      - uses: peter-evans/create-pull-request@v6
        with:
          branch: chore/bump-next-snapshot
          title: "chore(version): bump to ${{ steps.bump.outputs.next }}"
          body: "Auto bump to next development iteration after `${{ github.ref_name }}`"