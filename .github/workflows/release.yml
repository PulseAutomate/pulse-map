name: Release (tagged)

on:
  push:
    tags:
      - 'v*'
      - 'V*'      # allow uppercase V too
  workflow_dispatch: {}  # manual trigger for sanity checks

permissions:
  contents: write
  attestations: write
  id-token: write

env:
  JAVA_VERSION: '21'
  NATIVE_TASK: ':map-cli:nativeCompile'
  BIN_DIR: 'map-cli/build/native/nativeCompile'  # graalvm buildtools default output
  IMAGE_NAME: 'pulse-map'                        # matches graal imageName

jobs:
  guard-main:
    name: Guard - main + tag sanity
    runs-on: ubuntu-latest
    outputs:
      is_prerelease: ${{ steps.vercheck.outputs.is_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.ref }}

      # Only runs on real tag pushes
      - name: Ensure tag commit is on main
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          set -euo pipefail
          # Resolve annotated/lightweight tag to commit SHA
          COMMIT_SHA="$(git rev-parse "${GITHUB_REF}^{commit}")"
          echo "Tag: ${GITHUB_REF}"
          echo "Commit pointed to by tag: ${COMMIT_SHA}"
          # Ensure we have origin/main locally
          git fetch --no-tags --depth=1 origin +refs/heads/main:refs/remotes/origin/main
          # Verify the tag's commit is contained in origin/main
          if ! git merge-base --is-ancestor "${COMMIT_SHA}" origin/main; then
            echo "Tag must point to a commit on main (not found in origin/main)"; exit 1;
          fi

      - name: Require annotated tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          set -euo pipefail
          TYPE="$(git for-each-ref --format="%(objecttype)" "refs/tags/${GITHUB_REF_NAME}")"
          echo "Tag object type: ${TYPE}"
          [ "${TYPE}" = "tag" ] || { echo "Tag must be annotated"; exit 1; }

      - name: Validate tag format (SemVer + optional pre-release)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG="${GITHUB_REF_NAME}"
          [[ "${TAG}" =~ ^[vV][0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z]+[0-9]*)?$ ]] || {
            echo "Bad tag format: ${TAG}"; exit 1; }

      - name: Compare gradle.properties version with tag
        id: vercheck
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          PROP="$(grep '^version=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')"
          TAG="${GITHUB_REF_NAME#v}"
          TAG="${TAG#V}"
          echo "gradle.properties version: ${PROP}"
          echo "Tag version: ${TAG}"
          [ "${PROP}" = "${TAG}" ] || { echo "Version mismatch: gradle.properties=${PROP}, tag=${TAG}"; exit 1; }
          case "${TAG}" in
            *-M*|*-RC*|*-alpha*|*-beta*|*-preview*)
              echo "is_prerelease=true"  >> "${GITHUB_OUTPUT}" ;;
            *)
              echo "is_prerelease=false" >> "${GITHUB_OUTPUT}"
              [[ "${PROP}" == *-SNAPSHOT ]] && { echo "Release version must not end with -SNAPSHOT"; exit 1; } ;;
          esac

  changelog:
    name: Patch CHANGELOG.md
    needs: guard-main
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.ref }}

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Gradle setup
        uses: gradle/gradle-build-action@v3

      - name: Patch changelog
        run: ./gradlew --no-daemon patchChangelog -Pversion=${GITHUB_REF_NAME#v}

      - name: Commit & push changelog
        run: |
          if ! git diff --quiet; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add CHANGELOG.md
            git commit -m "docs(changelog): release ${GITHUB_REF_NAME}"
            git push
          fi

  build:
    name: Native build (${{ matrix.os }} / ${{ matrix.label }})
    needs: guard-main
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            label: linux-x86_64
            archive: tar.gz
            exe_ext: ""
          - os: windows-latest
            label: windows-x86_64
            archive: zip
            exe_ext: ".exe"
          - os: macos-13
            label: macos-x86_64
            archive: tar.gz
            exe_ext: ""
          - os: macos-latest
            label: macos-arm64
            archive: tar.gz
            exe_ext: ""
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.ref }}

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          distribution: graalvm-community
          java-version: ${{ env.JAVA_VERSION }}
          components: native-image
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Gradle setup
        uses: gradle/gradle-build-action@v3

      - name: Sanity tests
        run: ./gradlew --no-daemon test

      - name: Build native image
        run: ./gradlew --no-daemon ${{ env.NATIVE_TASK }}

      # --- package (*nix) ---
      - name: Package artifact (*nix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME#v}"; TAG="${TAG#V}"
          NAME="${IMAGE_NAME}"
          LABEL="${{ matrix.label }}"
          BIN="${BIN_DIR}/${NAME}${{ matrix.exe_ext }}"
          [ -f "${BIN}" ] || { echo "Binary not found at ${BIN}"; ls -R map-cli/build || true; exit 1; }
          chmod +x "${BIN}"
          mkdir -p "dist/${NAME}-${TAG}-${LABEL}"
          cp "${BIN}" "dist/${NAME}-${TAG}-${LABEL}/${NAME}${{ matrix.exe_ext }}"
          (cd dist && tar -czf "${NAME}-${TAG}-${LABEL}.tar.gz" "${NAME}-${TAG}-${LABEL}")

      # --- package (Windows) ---
      - name: Package artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          LABEL: ${{ matrix.label }}
        run: |
          $Tag  = "${env:GITHUB_REF_NAME}".TrimStart('v','V')
          $Name = "${env:IMAGE_NAME}"
          $Bin  = "map-cli/build/native/nativeCompile/$Name.exe"
          if (-not (Test-Path $Bin)) { Get-ChildItem -Recurse map-cli/build; throw "Binary not found at $Bin" }
          $Base = "$Name-$Tag-$env:LABEL"
          New-Item -ItemType Directory -Force -Path "dist/$Base" | Out-Null
          Copy-Item $Bin "dist/$Base/$Name.exe"
          Compress-Archive -Path "dist/$Base/*" -DestinationPath "dist/$Base.zip" -Force

      # --- smoke test (*nix) ---
      - name: Smoke test binary (--version) (*nix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME#v}"; TAG="${TAG#V}"
          BIN="dist/${IMAGE_NAME}-${TAG}-${{ matrix.label }}/${IMAGE_NAME}${{ matrix.exe_ext }}"
          "${BIN}" --version

      # --- smoke test (Windows) ---
      - name: Smoke test binary (--version) (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          LABEL: ${{ matrix.label }}
        run: |
          $Tag  = "${env:GITHUB_REF_NAME}".TrimStart('v','V')
          $Name = "${env:IMAGE_NAME}"
          & "dist/$Name-$Tag-$env:LABEL/$Name.exe" --version

      - name: Create SBOM (CycloneDX)
        run: ./gradlew --no-daemon cyclonedxBomAll || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-${{ github.ref_name }}-${{ matrix.label }}
          path: |
            dist/*.zip
            dist/*.tar.gz
            **/build/reports/bom*.json
            **/build/reports/bom*.xml
          if-no-files-found: warn

  draft-release:
    name: Draft release + checksums + provenance
    needs: [guard-main, changelog, build]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Flatten downloaded artifacts
        shell: bash
        run: |
          shopt -s globstar nullglob
          mkdir -p dist/flat
          for f in dist/**/*.zip dist/**/*.tar.gz; do
            [ -e "$f" ] || continue
            mv "$f" dist/
          done
          echo "Top-level dist contents:"
          ls -l dist || true

      - name: Generate SHA-256 checksums
        shell: bash
        run: |
          cd dist
          for f in *.zip *.tar.gz; do
            [ -e "$f" ] || continue
            sha256sum "$f" > "$f.sha256"
          done
          ls -l

      - name: Checkout (for CHANGELOG)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.ref }}

      - name: Extract notes for this tag from CHANGELOG.md
        id: notes
        run: |
          TAG="${GITHUB_REF_NAME#v}"; TAG="${TAG#V}"
          awk -v tag="${TAG}" '
            $0 ~ "^## \\["tag"\\]" {p=1; next}
            p && $0 ~ "^## \\[" {p=0}
            p {print}
          ' CHANGELOG.md > notes.md || true
          [ -s notes.md ] || echo "No specific section found; using empty body."

      - name: Attest build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            dist/*.zip
            dist/*.tar.gz

      - name: Create/Update draft GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: ${{ needs.guard-main.outputs.is_prerelease }}
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body_path: notes.md
          files: |
            dist/*.zip
            dist/*.tar.gz
            dist/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  next-dev:
    name: Bump to next -SNAPSHOT via PR
    needs: draft-release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.ref }}

      - name: Compute and bump version
        id: bump
        run: |
          CUR="$(grep '^version=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')"
          IFS='.-' read MA MI PA REST <<<"${CUR}"
          NEXT="${MA}.${MI}.$((PA+1))-SNAPSHOT"
          sed -i -E "s/^version=.*/version=${NEXT}/" gradle.properties
          git switch -c chore/bump-next-snapshot || git checkout -b chore/bump-next-snapshot
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -am "chore(version): bump to ${NEXT}"
          git push -u origin chore/bump-next-snapshot
          echo "next=${NEXT}" >> "${GITHUB_OUTPUT}"

      - name: Open PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: chore/bump-next-snapshot
          title: "chore(version): bump to ${{ steps.bump.outputs.next }}"
          body: "Auto bump to next development iteration after `${{ github.ref_name }}`"
