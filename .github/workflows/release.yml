# .github/workflows/release.yml
# This workflow creates a GitHub Release with native GraalVM executables.
# It triggers automatically when a tag starting with 'v' is pushed.

name: Create Release with GraalVM Native Binaries

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          graalvm-version: 'latest'
          native-image-job-reports: 'true'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build native executable with Gradle
        run: ./gradlew :map-cli:nativeCompile

      - name: Upload Linux executable
        uses: actions/upload-artifact@v4
        with:
          name: pulse-map-linux-amd64
          path: map-cli/build/native/nativeCompile/pulse-map

  build-macos:
    name: Build for macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          graalvm-version: 'latest'
          native-image-job-reports: 'true'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build native executable with Gradle
        run: ./gradlew :map-cli:nativeCompile

      - name: Upload macOS executable
        uses: actions/upload-artifact@v4
        with:
          name: pulse-map-macos-amd64
          path: map-cli/build/native/nativeCompile/pulse-map

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          graalvm-version: 'latest'
          native-image-job-reports: 'true'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build native executable with Gradle
        run: ./gradlew.bat :map-cli:nativeCompile

      - name: Upload Windows executable
        uses: actions/upload-artifact@v4
        with:
          name: pulse-map-windows-amd64.exe
          path: map-cli/build/native/nativeCompile/pulse-map.exe

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Version Consistency
        run: |
          TAG_VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          PROJECT_VERSION=$(grep 'version=' gradle.properties | cut -d'=' -f2)
          echo "Git Tag Version: $TAG_VERSION"
          echo "Project Version: $PROJECT_VERSION"
          if [ "$TAG_VERSION" != "$PROJECT_VERSION" ]; then
            echo "Error: Git tag version ($TAG_VERSION) does not match project version in gradle.properties ($PROJECT_VERSION)."
            exit 1
          fi

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Finalize Changelog
        run: ./gradlew patchChangelog --no-daemon

      - name: Commit updated changelog
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs(changelog): update for release ${{ github.ref_name }}"
          file_pattern: CHANGELOG.md

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          draft: true
          prerelease: false

      - name: Upload Release Assets
        run: |
          for dir in dist/*; do
            file_path=$(find "$dir" -type f)
            echo "Uploading $file_path..."
            gh release upload ${{ github.ref_name }} "$file_path" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
